/*
 * Copyright (c) Mirth Corporation. All rights reserved.
 * 
 * http://www.mirthcorp.com
 * 
 * The software in this package is published under the terms of the MPL license a copy of which has
 * been included with this distribution in the LICENSE.txt file.
 */

package com.mirth.connect.connectors.udp;

import java.util.ArrayList;
import java.util.List;
import java.util.UUID;

import org.mozilla.javascript.Context;
import org.mozilla.javascript.EvaluatorException;

import com.mirth.connect.client.ui.UIConstants;
import com.mirth.connect.client.ui.VariableListHandler.TransferMode;
import com.mirth.connect.client.ui.components.MirthIconTextField;
import com.mirth.connect.client.ui.components.MirthTextField;
import com.mirth.connect.client.ui.panels.connectors.ConnectorSettingsPanel;
import com.mirth.connect.donkey.model.channel.ConnectorProperties;
import com.mirth.connect.model.codetemplates.ContextType;
import com.mirth.connect.util.JavaScriptSharedUtil;
import javax.swing.JLabel;
import javax.swing.GroupLayout.Alignment;
import javax.swing.GroupLayout;
import javax.swing.LayoutStyle.ComponentPlacement;
import javax.swing.JTextField;
import java.awt.event.ActionListener;
import java.awt.event.ActionEvent;
import javax.swing.SwingConstants;

public class UdpWriter extends ConnectorSettingsPanel {

	public UdpWriter() {
		initComponents();
	}

	@Override
	public String getConnectorName() {
		return new UdpDispatcherProperties().getName();
	}

	@Override
	public ConnectorProperties getProperties() {
		UdpDispatcherProperties properties = new UdpDispatcherProperties();

		return properties;
	}

	@Override
	public void setProperties(ConnectorProperties properties) {
		UdpDispatcherProperties props = (UdpDispatcherProperties) properties;
		portField.setText(props.getPort() + "");
	}

	@Override
	public ConnectorProperties getDefaults() {
		return new UdpDispatcherProperties();
	}

	@Override
	public boolean checkProperties(ConnectorProperties properties, boolean highlight) {
		UdpDispatcherProperties props = (UdpDispatcherProperties) properties;

		boolean valid = true;

		if (portField.getText().equals("0")) {
			valid = false;
			if (highlight) {
				portField.setBackground(UIConstants.INVALID_COLOR);
			}
		}

		return valid;
	}

	public TransferMode getTransferMode() {
		return TransferMode.JAVASCRIPT;
	}

	@Override
	public void resetInvalidProperties() {
		portField.setBackground(null);
	}

	@Override
	public void setVisible(boolean aFlag) {
		super.setVisible(aFlag);
	}

	@Override
	public String doValidate(ConnectorProperties properties, boolean highlight) {
		UdpDispatcherProperties props = (UdpDispatcherProperties) properties;
		String error = null;
		if (portField.getText().equals("0")) {
			error += "Error in connector \"" + getName() + "\" a valid port number must be set.";
		}else {
			props.setPort(Integer.parseInt(portField.getText().trim()));
		}
		return error;
	}

	@Override
	public List<String> getScripts(ConnectorProperties properties) {
		List<String> scripts = new ArrayList<String>();
		return scripts;
	}

	// @formatter:off
	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	// <editor-fold defaultstate="collapsed" desc=" Generated Code
	// <editor-fold defaultstate="collapsed" desc="Generated
	// Code">//GEN-BEGIN:initComponents
	private void initComponents() {

		portLabel = new javax.swing.JLabel();

		setBackground(new java.awt.Color(255, 255, 255));
		setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));

		portLabel.setText("Port");

		portField = new MirthTextField();
		portField.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent arg0) {
				((UdpDispatcherProperties)getProperties()).setPort(Integer.parseInt(portField.getText()));
			}
		});
		portField.setText(((UdpDispatcherProperties) getProperties()).getPort()+"");
		portField.setColumns(10);
		
		addressField = new MirthIconTextField();
		addressField.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				((UdpDispatcherProperties)getProperties()).setAddress(addressField.getText());
			}
		});
		addressField.setText("localhost");
		addressField.setColumns(10);
		
		JLabel addressLabel = new JLabel("Address");
		
		JLabel lblUdpWriter = new JLabel("UDP Writer");
		
		JLabel label_1 = new JLabel();
		label_1.setText(":");
		label_1.setHorizontalAlignment(SwingConstants.RIGHT);
		
		JLabel label = new JLabel();
		label.setText(":");
		label.setHorizontalAlignment(SwingConstants.RIGHT);

		javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
		layout.setHorizontalGroup(
			layout.createParallelGroup(Alignment.LEADING)
				.addGroup(layout.createSequentialGroup()
					.addContainerGap()
					.addGroup(layout.createParallelGroup(Alignment.LEADING)
						.addComponent(lblUdpWriter)
						.addGroup(layout.createSequentialGroup()
							.addGroup(layout.createParallelGroup(Alignment.LEADING)
								.addComponent(addressLabel, GroupLayout.PREFERRED_SIZE, 63, GroupLayout.PREFERRED_SIZE)
								.addComponent(portLabel))
							.addPreferredGap(ComponentPlacement.RELATED)
							.addGroup(layout.createParallelGroup(Alignment.LEADING)
								.addComponent(label_1)
								.addComponent(label, GroupLayout.PREFERRED_SIZE, 5, GroupLayout.PREFERRED_SIZE))
							.addPreferredGap(ComponentPlacement.RELATED)
							.addGroup(layout.createParallelGroup(Alignment.LEADING)
								.addComponent(addressField, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
								.addComponent(portField, GroupLayout.PREFERRED_SIZE, 59, GroupLayout.PREFERRED_SIZE))))
					.addGap(47))
		);
		layout.setVerticalGroup(
			layout.createParallelGroup(Alignment.LEADING)
				.addGroup(layout.createSequentialGroup()
					.addContainerGap()
					.addComponent(lblUdpWriter)
					.addPreferredGap(ComponentPlacement.RELATED)
					.addGroup(layout.createParallelGroup(Alignment.BASELINE)
						.addComponent(label_1)
						.addComponent(addressField, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
						.addComponent(addressLabel))
					.addGap(10)
					.addGroup(layout.createParallelGroup(Alignment.BASELINE)
						.addComponent(label)
						.addComponent(portField, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
						.addComponent(portLabel))
					.addContainerGap(208, Short.MAX_VALUE))
		);
		this.setLayout(layout);
	}// </editor-fold>//GEN-END:initComponents

	private javax.swing.JLabel portLabel;
	private MirthTextField portField;
	private MirthIconTextField addressField;
}
